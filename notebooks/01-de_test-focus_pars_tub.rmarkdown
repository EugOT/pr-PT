---
title: "Differential expression analysis of Hypothalamus datasets from Kim DW et al., 2020 and Romanov et al., 2020 with focus on Pars Tuberalis"
author: "Evgenii O. Tretiakov"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    df-print: paged
    code-fold: true
    fig-width: 9
    fig-height: 12
    fig-format: retina
    fig-responsive: true
    fig-dpi: 120
  pdf:
    colorlinks: true
    fontsize: 12pt
execute:
  keep-md: true
  echo: true
  error: false
  message: false
  warning: false
  debug: false
knitr:
  opts_chunk:
    autodep: true
    fig.align: center
    fig.retina: 2
    fig.width: 14
    fig.height: 12
---

```{r}
#| label: setup
#| include: false
DOCNAME <- "pars-tuberalis-analysis"
NOW <- Sys.time()

# Time chunks during knitting
knitr::knit_hooks$set(timeit = function(before) {
  if (before) {
    print(paste("Start:", Sys.time()))
    NOW <<- Sys.time()
  } else {
    print(paste("Stop:", Sys.time()))
    print(Sys.time() - NOW)
  }
})

knitr::knit_hooks$set(debug = function(before, options, envir) {
  if (!before) {
    message(
      paste(names(envir), as.list(envir),
        sep = " = ", collapse = "\n"
      )
    )
  }
})

knitr::opts_chunk$set(
  cache          = FALSE,
  dev            = c("png", "pdf"),
  timeit         = TRUE
)
```




## Load data and setup parameters




```{r}
#| label: libraries
#| cache: false
# Load tidyverse infrastructure packages
suppressPackageStartupMessages({
  library(future)
  library(here)
  library(tidyverse)
  library(magrittr)
  library(stringr)
  library(skimr)
  library(RColorBrewer)
  library(viridis)
})


# Load packages for scRNA-seq analysis and visualisation
suppressPackageStartupMessages({
  library(ggplot2)
  library(cowplot)
  library(patchwork)
  library(ggstatsplot)
  library(Seurat)
  library(SeuratWrappers)
  library(scCustomize)
})
```




### Set paths




```{r}
#| label: paths
src_dir <- here("code")
data_dir <- here("data")
output_dir <- here("output")
plots_dir <- here(output_dir, "figures/")
tables_dir <- here(output_dir, "tables/")
```




### Load helper functions and gene-sets




```{r}
#| label: source
#| cache: false
source(here(src_dir, "genes.R"))
source(here(src_dir, "functions.R"))
```




### Set fixed variables




```{r}
#| label: params-computation
#| cache: false
# set seed
reseed <- 42
set.seed(seed = reseed)

# Parameters for parallel execution
n_cores <- parallelly::availableCores() / 2 - 1
plan("multisession", workers = n_cores)
options(
  future.globals.maxSize = 100000 * 1024^2,
  future.rng.onMisuse = "ignore"
)
plan()


# ggplot2 theme
theme_set(theme_minimal(base_size = 12))
```

```{r}
#| label: params
bioproject <- "PRJNA547712"
project <- "kim2020_Hypoth-dev"
cb_fpr <- 0.001
low_cutoff_gene <- 500
high_cutoff_gene <- NULL
high_cutoff_gene <- 5000
low_cutoff_umis <- NULL
low_cutoff_umis <- -Inf
high_cutoff_umis <- 25000
high_cutoff_pc_mt <- 15
high_cutoff_pc_ribo <- 20
high_cutoff_pc_hb <- 0.1
high_cutoff_doublet_score <- 0.33
high_cutoff_complexity <- 0.85
connectivity_model <- "min_tree"
k <- 10
metric <- "euclidean"
signature <- 100
```




## Load data from Kim DW et al 2020 (bioproject PRJNA547712)




```{r}
#| label: convert-to-seurat
srt.kim <- schard::h5ad2seurat(here(
  data_dir,
  "kim2020_combined.h5ad"
), use.raw = TRUE)

X_umap <- srt.kim@meta.data |>
  select(X, Y, Z) |>
  as.matrix()
colnames(X_umap) <- c("UMAP_1", "UMAP_2", "UMAP_3")
rownames(X_umap) <- colnames(srt.kim)
srt.kim[["umap"]] <- CreateDimReducObject(embeddings = X_umap, key = "umap_", assay = DefaultAssay(srt.kim))
srt.kim$Age %<>% forcats::fct(levels = c(
  "E10", "E11", "E12", "E13", "E14",
  "E15", "E16", "E17", "E18", "P0",
  "P2", "P4", "P8", "P10", "P14", "P23", "P45"
))

Idents(srt.kim) <- "Age"
srt.kim <- Store_Palette_Seurat(seurat_object = srt.kim, palette = rev(brewer.pal(n = 11, name = "Spectral")), palette_name = "expr_Colour_Pal")
```

```{r}
#| label: load-seurat
print(srt.kim)
srt.romanov.pub <- readRDS("/data/1_heteroAstrocytes/PRJNA548917/old/oldCCA_nae_srt.rds") # Load the Seurat object deposited to GEO by Romanov et al. (2020)
srt.romanov.pub <- UpdateSeuratObject(srt.romanov.pub)
srt.romanov.pub$Age <-
  Cells(srt.romanov.pub) |>
  str_split(pattern = ":", simplify = T) %>%
  .[, 1] %>%
  str_split_fixed(pattern = "_", n = 3) %>%
  .[, 3]
srt.romanov.pub$Age %<>% forcats::fct(levels = c(
  "E10", "E11", "E12", "E13", "E14",
  "E15", "E16", "E17", "E18", "P0",
  "P2", "3P2", "P4", "P8", "1P10",
  "P10", "P14", "P23", "P45"
))
srt.romanov.pub$Age %<>% fct_collapse(
  P2 = c("P2", "3P2"),
  P10 = c("1P10", "P10")
)
srt.romanov.pub <- Store_Palette_Seurat(
  seurat_object = srt.romanov.pub,
  palette = read_lines(here(data_dir, "colours_wtree.tsv")), palette_name = "wtree_Colour_Pal"
)
names(srt.romanov.pub@misc$wtree_Colour_Pal) <- 1:45
print(srt.romanov.pub)
glimpse(srt.romanov.pub@meta.data)
table(Idents(srt.romanov.pub))
srt.romanov.pt <- subset(srt.romanov.pub, idents = c("38", "42", "45"))
print(srt.romanov.pt)
```

```{r}
#| label: fig-feature-romanov2020
#| fig-cap: "Feature plot of selected genes in hypothalamus across different developmental stages in the Romanov et al. (2020) dataset (original UMAP embedding). Cells are colored by expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 24
#| fig-height: 36
FeaturePlot(
  srt.romanov.pub,
  features = c(
    "Tshb", "Cck", "Pitx1",
    "Eya1", "Eya2", "Eya3", "Eya4",
    "Sox2", "Hlf", "Tshr",
    "Cckar", "Cckbr", "Gpr173",
    "Foxl2", "Lhx3", "Lhx4", "Pit1", "Gata2"
  ),
  label = F,
  blend = F,
  order = TRUE,
  pt.size = 1.2,
  raster.dpi = c(512, 512),
  alpha = 0.5,
  split.by = "Age"
)
```

```{r}
#| label: fig-feature-pt-romanov2020
#| fig.cap: "Feature plot of selected genes in hypothalamus across different developmental stages in the subset of the pars tuberalis clusters from the Romanov et al. (2020) dataset (original UMAP embedding). Cells are colored by a gene expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 24
#| fig-height: 36
FeaturePlot(
  srt.romanov.pt,
  features = c(
    "Tshb", "Cck", "Pitx1",
    "Eya1", "Eya2", "Eya3", "Eya4",
    "Sox2", "Hlf", "Tshr",
    "Cckar", "Cckbr", "Gpr173",
    "Foxl2", "Lhx3", "Lhx4", "Pit1", "Gata2"
  ),
  label = T,
  blend = F,
  order = TRUE,
  pt.size = 1.2,
  raster.dpi = c(512, 512),
  alpha = 0.5,
  split.by = "Age"
)
```

```{r}
#| label: norm-scale-matrix
# Using gene name patterns
srt.kim <- Add_Mito_Ribo(object = srt.kim, species = "Mouse", ensembl_ids = FALSE)
srt.kim$umi_per_gene <- 
  (srt.kim$nCount_RNA/srt.kim$nFeature_RNA)
srt.kim$log_umi_per_gene <- 
  log10(srt.kim$umi_per_gene)
srt.kim <- NormalizeData(srt.kim)
srt.kim <- FindVariableFeatures(srt.kim, selection.method = "vst", nfeatures = 5000)
all.genes <- rownames(srt.kim)
srt.kim <- ScaleData(srt.kim, features = all.genes, vars.to.regress = c("log_umi_per_gene", "percent_mito_ribo"))
# srt.kim <- ScaleData(srt.kim)
```

```{r}
#| label: transfer-annotations
hypoth.anchors <- FindTransferAnchors(
  reference = srt.romanov.pub,
  query = srt.kim,
  dims = 1:30,
  npcs = 30,
  reference.reduction = "pca",
  reduction = "rpca",
  k.anchor = 15,
  k.filter = 30,
  k.score = 50,
  max.features = 500,
  nn.method = "annoy",
  n.trees = 200
)
predictions <- TransferData(anchorset = hypoth.anchors, refdata = srt.romanov.pub$wtree, dims = 1:30) # TODO: check if I can randomly subset the reference data to handle the imbalance of clusters
srt.kim <- AddMetaData(srt.kim, metadata = predictions)
table(srt.kim$predicted.id)
```

```{r}
#| label: transfer-umap
srt.romanov.pub <- RunUMAP(srt.romanov.pub, dims = 1:30, reduction = "pca", return.model = TRUE)
srt.kim <- IntegrateEmbeddings(
  anchorset = hypoth.anchors, reference = srt.romanov.pub, query = srt.kim,
  new.reduction.name = "ref.pca"
)
srt.kim <- ProjectUMAP(
  query = srt.kim, query.reduction = "ref.pca", reference = srt.romanov.pub,
  reference.reduction = "pca", reduction.model = "umap"
)
```

```{r}
#| label: fig-reference-umap-transfered
#| fig-cap: "UMAP plot of the Romanov et al. (2020) dataset with reference annotations and transferred labels on the the Kim DW et al. (2020) dataset. Cells are colored by published *wtree* clusters' labels identified as pars tuberalis. Note the successful embedding of query dataset according to the reference dataset and slight change of the reference embedding model in the process."
Idents(srt.romanov.pub) <- "wtree"
p1 <- Cluster_Highlight_Plot(
  seurat_object = srt.romanov.pub,
  reduction = "umap",
  label = TRUE,
  label.size = 3,
  repel = TRUE,
  cluster_name = c("38", "42", "45"),
  highlight_color = srt.romanov.pub@misc$wtree_Colour_Pal[c("38", "42", "45")]
) +
  NoLegend() +
  ggtitle("Reference annotations")

Idents(srt.kim) <- "predicted.id"
p2 <- Cluster_Highlight_Plot(
  seurat_object = srt.kim,
  reduction = "ref.umap",
  label = TRUE,
  label.size = 3,
  repel = TRUE,
  cluster_name = c("38", "42", "45"),
  highlight_color = srt.romanov.pub@misc$wtree_Colour_Pal[c("38", "42", "45")]
) +
  NoLegend() +
  ggtitle("Query transferred labels")

p1 + p2
```

```{r}
#| label: fig-feature-romanov2020-integrated
#| fig.cap: "Feature plot of selected genes in hypothalamus across different developmental stages in the Romanov et al. (2020) dataset (new integrated UMAP embedding). Cells are colored by expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 24
#| fig-height: 36
FeaturePlot(
  srt.romanov.pub,
  features = c(
    "Tshb", "Cck", "Pitx1",
    "Eya1", "Eya2", "Eya3", "Eya4",
    "Sox2", "Hlf", "Tshr",
    "Cckar", "Cckbr", "Gpr173",
    "Foxl2", "Lhx3", "Lhx4", "Pit1", "Gata2"
  ),
  label = F,
  blend = F,
  order = TRUE,
  pt.size = 1.2,
  raster.dpi = c(512, 512),
  alpha = 0.5,
  split.by = "Age"
)
```




# Calculate and plot chi2 test of independence between Sox2 and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: get-goi-sox2-tshr
sbs_mtx <- GetAssayData(object = srt.kim, layer = "counts", assay = "RNA")[c("Sox2", "Tshr"), ] %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  select(Sox2, Tshr) %>%
  dplyr::bind_cols(srt.kim@meta.data) %>%
  select(Age, Sox2, Tshr) %>%
  mutate(
    Sox2_pos = Sox2 > 0,
    Tshr_pos = Tshr > 0
  )

sbs_mtx %>% skimr::skim()
```

```{r}
#| label: fig-sox2-tshr-stats
#| fig-cap: "Proportion of Sox2 and Tshr expression in hypothalamus across different developmental stages. Cells are colored by Sox2 and Tshr expression status. Note the distinct Sox2 and Tshr expression patterns across different developmental stages."
#| fig-width: 8
#| fig-height: 24
write_csv(sbs_mtx, here(tables_dir, "Sox2-Tshr-expression-status-between-Ages-on-evaluation-datasets.csv"))


# plot
grouped_ggpiestats(
  data = sbs_mtx,
  x = Tshr_pos,
  y = Sox2_pos,
  grouping.var = Age,
  perc.k = 1,
  package = "ggsci",
  palette = "category10_d3",
  title.text = "Sox2 specification of Tshr-positive hypothalamic development",
  caption.text = "Asterisks denote results from proportion tests; \n***: p < 0.001, ns: non-significant",
  plotgrid.args = list(nrow = 8)
)
```




## Calculate and plot hexagonal cells representation in hypothalamus across different developmental stages with meta information




```{r}
srt.kim
```

```{r}
#| label: fig-hexbin-umap-kim2020
#| fig-cap: "Hexagonal binning plot of the Kim DW et al. (2020) dataset in the hypothalamus of all developmental stages. Cells are colored by cell count."
library(hexbin)
# Extract UMAP coordinates
umap_coords <- Embeddings(srt.kim, reduction = "ref.umap")

# Create hexbin object
hb <- hexbin(umap_coords[, 1], umap_coords[, 2], xbins = 64)

# Create a data frame for plotting
hex_data <- data.frame(
  x = hcell2xy(hb)$x,
  y = hcell2xy(hb)$y,
  count = hb@count
)

# Create the plot
ggplot(hex_data, aes(x = x, y = y, fill = count)) +
  geom_hex(stat = "identity") +
  scale_fill_gradientn(colors = ggsci::pal_material("amber")(9)) +
  labs(x = "UMAP_1", y = "UMAP_2", fill = "Cell\nCount") +
  coord_fixed()
```

```{r}
#| label: fig-feature-kim2020
#| fig-cap: "Feature plot of selected genes in hypothalamus across different developmental stages in the Kim DW et al. (2020) dataset (integrated UMAP embedding). Cells are colored by expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 32
#| fig-height: 36
FeaturePlot(
  srt.kim,
  features = c(
    "Tshb", "Cck", "Pitx1",
    "Eya1", "Eya2", "Eya3", "Eya4",
    "Sox2", "Hlf", "Tshr",
    "Cckar", "Cckbr", "Gpr173",
    "Foxl2", "Lhx3", "Lhx4", "Pit1", "Gata2"
  ),
  reduction = "ref.umap",
  label = F,
  blend = F,
  order = TRUE,
  pt.size = 1.2,
  raster.dpi = c(512, 512),
  alpha = 0.5,
  split.by = "Age"
)
```

```{r}
#| label: fig-prediction-scores-kim2020
#| fig-cap: "Feature plot of prediction scores in hypothalamus of all developmental stages in the Kim DW et al. (2020) dataset (integrated UMAP embedding). Cells are colored by prediction score of pars tuberalis identified clusters. Note the distinct localization patterns of prediction score."
#| fig-width: 21
#| fig-height: 5
Idents(srt.kim) <- "predicted.id"
FeaturePlot(
  srt.kim,
  features = c(
    "prediction.score.38",
    "prediction.score.42",
    "prediction.score.45"
  ),
  reduction = "ref.umap",
  label = T,
  repel = T,
  blend = F,
  order = TRUE,
  pt.size = 4,
  raster.dpi = c(512, 512),
  alpha = 0.8,
  max.cutoff = "q90",
  ncol = 3
)
```

```{r}
#| label: fig-prediction-scores-split-kim2020
#| fig-cap: "Feature plot of prediction scores in hypothalamus across different developmental stages in the Kim DW et al. (2020) dataset (integrated UMAP embedding). Cells are colored by prediction score of pars tuberalis identified clusters. Note the distinct localization patterns of prediction score."
#| fig-width: 32
#| fig-height: 6.353
FeaturePlot(
  srt.kim,
  features = c(
    "prediction.score.38",
    "prediction.score.42",
    "prediction.score.45"
  ),
  reduction = "ref.umap",
  label = F,
  blend = F,
  order = TRUE,
  pt.size = 1.2,
  raster.dpi = c(512, 512),
  alpha = 0.8,
  max.cutoff = "q90",
  split.by = "Age"
)
```

```{r}
#| label: fig-prediction-id-kim2020
#| fig-cap: "Feature plot of predicted clusters in hypothalamus of all developmental stages in the Kim DW et al. (2020) dataset (integrated UMAP embedding). Cells are colored by predicted clusters. Note the distinct localization patterns of clusters 38 and 45."
#| fig-width: 7
#| fig-height: 5
DimPlot(
  srt.kim,
  group.by = c("predicted.id"),
  reduction = "ref.umap",
  label = T,
  repel = T,
  pt.size = 4,
  raster.dpi = c(300, 300),
  alpha = 0.5
)
```

```{r}
#| label: fig-prediction-split-kim2020
#| fig-cap: "Feature plot of projected Pars Tuberalis clusters in hypothalamus across different developmental stages in the Kim DW et al. (2020) dataset (integrated UMAP embedding). Cells are colored by original colour code of wtree clusters. Note the distinct localization patterns of clusters 38 and 45."
#| fig-width: 14
#| fig-height: 5
p38kim <- Cluster_Highlight_Plot(
  seurat_object = srt.kim,
  reduction = "ref.umap",
  label = TRUE,
  label.size = 1.2,
  repel = TRUE,
  # split.by = "Age",
  cluster_name = "38",
  highlight_color = srt.romanov.pub@misc$wtree_Colour_Pal["38"]
) + NoLegend()

# Not found
# p42kim <- Cluster_Highlight_Plot(
#   seurat_object = srt.kim,
#   reduction = "ref.umap",
#   label = TRUE,
#   label.size = 1.2,
#   repel = TRUE,
#   # split.by = "Age",
#   cluster_name = "42",
#   highlight_color = srt.romanov.pub@misc$wtree_Colour_Pal["42"]
# ) + NoLegend()

p45kim <- Cluster_Highlight_Plot(
  seurat_object = srt.kim,
  reduction = "ref.umap",
  label = TRUE,
  label.size = 1.2,
  repel = TRUE,
  # split.by = "Age",
  cluster_name = "45",
  highlight_color = srt.romanov.pub@misc$wtree_Colour_Pal["45"]
) + NoLegend()

# (p38kim | p42kim | p45kim)
p38kim | p45kim
```




## Quantify and plot representation of gene interactions with feature expression Spearman’s correlation

### Kim DW et al. 2020 dataset




```{r}
#| label: fig-violin-gene-interactions-kim2020
#| fig-cap: Gene expression of projected Pars Tuberalis clusters in hypothalamus across different developmental stages in the Kim DW et al. (2020) dataset.
#| fig-width: 12
#| fig-height: 12
cells_to_check <- WhichCells(srt.kim, idents = c("38", "42", "45") %>% .[. %in% levels(srt.kim)])
genes_to_check <- c(
  "Tshb",
  "Cck",
  "Pitx1",
  "Eya1",
  "Eya2",
  "Eya3",
  "Eya4",
  "Sox2",
  "Hlf",
  "Tshr",
  "Cckar",
  "Cckbr",
  "Gpr173",
  "Foxl2",
  "Lhx3",
  "Lhx4",
  "Pit1",
  "Gata2"
) %>%
  .[. %in% (srt.kim@assays$RNA@counts[, cells_to_check] |> rowSums() %>% .[. > 3] %>% names())]


# 1. Complete gene pairs - Ensure all combinations are present
gene_pairs <- combn(
  genes_to_check, 2
) |>
  as_tibble() |>
  array_tree(margin = 2)

ages <- c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P8", "P45")


# Violin plots of individual gene expression split by cluster
Idents(srt.kim) <- "Age" # Reset identity back to Age

Stacked_VlnPlot(subset(srt.kim, cells = cells_to_check), features = genes_to_check, split.by = "predicted.id", colors_use = srt.romanov.pub@misc$wtree_Colour_Pal[c("38", "42", "45")])
```

```{r}
#| label: setup-gene-correlation-analysis
#| include: false

# Helper functions
calculate_correlations <- function(seurat_obj, gene_pairs, group_var, cells) {
  map_dfr(gene_pairs, function(genes) {
    data <- seurat_obj |> 
      subset(cells = cells) |> 
      GetAssayData(layer = "data") |> 
      t() |> 
      as.data.frame() |> 
      select(all_of(genes))
    
    groups <- seurat_obj[[group_var]][cells, , drop = FALSE]
    
    # Calculate correlations for each group
    map_dfr(unique(groups[[1]]), function(group) {
      group_cells <- groups[[1]] == group
      group_data <- data[group_cells, ]
      
      # Spearman correlation test
      test_result <- pspearman::spearman.test(
        group_data[[genes[1]]], 
        group_data[[genes[2]]]
      ) |> 
        broom::tidy()
      
      tibble(
        group = group,
        gene1 = genes[1],
        gene2 = genes[2],
        correlation = test_result$estimate,
        p.value = test_result$p.value,
        n = sum(group_cells)
      )
    })
  })
}

generate_correlation_plots <- function(seurat_obj, genes, group_var, cells, age = NULL) {
  plot_data <- seurat_obj |> 
    subset(cells = cells) |> 
    GetAssayData(layer = "data") |> 
    t() |> 
    as.data.frame() |> 
    mutate(group = seurat_obj[[group_var]][cells, 1])
  
  if (!is.null(age)) {
    title <- paste("Gene correlation at", age)
  } else {
    title <- "Gene correlation"
  }
  
  grouped_ggscatterstats(
    data = plot_data,
    x = genes[1],
    y = genes[2],
    grouping.var = group,
    type = "nonparametric",
    xlab = genes[1],
    ylab = genes[2],
    title = title
  )
}
```

```{python}
#| label: generate-kim2020-correlation-plots
#| output: false
#| echo: false

import nbformat
from nbformat.v4 import new_notebook, new_markdown_cell, new_code_cell
import pandas as pd 

# Access R variables in Python using py$
gene_pairs = r.gene_pairs 
ages = r.ages 

# Convert gene_pairs to a Pandas DataFrame
gene_pairs = pd.DataFrame(gene_pairs).T

def generate_plot_chunk(genes, age):
    chunk_text = f'''#| label: fig-kim2020-correlation-{genes[0]}-{genes[1]}-{age}
#| fig-cap: "Correlation between {genes[0]} and {genes[1]} expression at {age} in Kim et al. 2020 dataset"
#| fig-width: 12
#| fig-height: 8

generate_correlation_plots(
  srt.kim |> subset(Age == "{age}"),
  c("{genes[0]}", "{genes[1]}"),
  "predicted.id",
  cells_to_check,
  age = "{age}"
)'''
    return chunk_text

# Generate chunks for each gene pair and age combination
cells = [new_markdown_cell("#### Gene Correlation Plots\n")]

for _, row in gene_pairs.iterrows():
    for age in ages:
        cells.append(new_code_cell(
            generate_plot_chunk([row[0], row[1]], age)
        ))

# Create notebook
nb = new_notebook(cells=cells)
nbformat.write(nb, 'gene_correlation_plots_kim2020.qmd')
```

```{r}
#| label: include-kim2020-correlation-plots
#| child: "gene_correlation_plots_kim2020.qmd"
```




#### Dotplots




```{r}
#| label: fig-dotplot-dendrogram-genes-kim2020
#| fig-cap: "Dotplot of selected genes in hypothalamus across different developmental stages in the Kim DW et al. (2020) dataset. Cells are colored by expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 6
#| fig-height: 6
Idents(srt.kim) <- "Age"

DotPlot_scCustom(seurat_object = subset(srt.kim, cells = cells_to_check), colors_use = viridis(n = 30, alpha = .75, direction = -1, option = "E"), features = genes_to_check, flip_axes = T, x_lab_rotate = TRUE, dot.scale = 15)
```




### Romanov et al. 2020 dataset




```{r}
#| label: fig-violin-gene-interactions-romanov2020
#| fig-cap: Gene expression of projected Pars Tuberalis clusters in hypothalamus across different developmental stages in the Romanov et al. (2020) dataset.
#| fig-width: 12
#| fig-height: 12
# Violin plots for srt.romanov.pub (split by its original clusters, 'wtree')
Idents(srt.romanov.pub) <- "wtree"
cells_to_check <- WhichCells(srt.romanov.pub, idents = c("38", "42", "45") %>% .[. %in% levels(srt.romanov.pub)])
genes_to_check <- c(
  "Tshb",
  "Cck",
  "Pitx1",
  "Eya1",
  "Eya2",
  "Eya3",
  "Eya4",
  "Sox2",
  "Hlf",
  "Tshr",
  "Cckar",
  "Cckbr",
  "Gpr173",
  "Foxl2",
  "Lhx3",
  "Lhx4",
  "Pit1",
  "Gata2"
) %>%
  .[. %in% (srt.romanov.pub@assays$RNA@counts[, cells_to_check] |> rowSums() %>% .[. > 3] %>% names())]


# Complete gene pairs
gene_pairs <- combn(
  genes_to_check, 2
) |>
  as_tibble() |>
  array_tree(margin = 2)

ages <- srt.romanov.pub$Age |>
  table() %>%
  .[. > 0] %>%
  names()

# Violin plots of individual gene expression split by cluster
Idents(srt.romanov.pub) <- "Age" # Reset identity back to Age

Stacked_VlnPlot(subset(srt.romanov.pub, cells = cells_to_check), features = genes_to_check, split.by = "wtree", colors_use = srt.romanov.pub@misc$wtree_Colour_Pal[c("38", "42", "45")])
```

```{python}
#| label: generate-romanov2020-correlation-plots
#| output: false
#| echo: false

import nbformat
from nbformat.v4 import new_notebook, new_markdown_cell, new_code_cell
import pandas as pd 

# Access R variables in Python using py$
gene_pairs = r.gene_pairs 
ages = r.ages 

# Convert gene_pairs to a Pandas DataFrame
gene_pairs = pd.DataFrame(gene_pairs).T

def generate_plot_chunk(genes, age):
    chunk_text = f'''#| label: fig-romanov2020-correlation-{genes[0]}-{genes[1]}-{age}
#| fig-cap: "Correlation between {genes[0]} and {genes[1]} expression at {age} in Romanov et al. 2020 dataset"
#| fig-width: 12
#| fig-height: 8

generate_correlation_plots(
  srt.romanov.pub |> subset(Age == "{age}"),
  c("{genes[0]}", "{genes[1]}"),
  "predicted.id",
  cells_to_check,
  age = "{age}"
)'''
    return chunk_text

# Generate chunks for each gene pair and age combination
cells = [new_markdown_cell("#### Gene Correlation Plots\n")]

for _, row in gene_pairs.iterrows():
    for age in ages:
        cells.append(new_code_cell(
            generate_plot_chunk([row[0], row[1]], age)
        ))

# Create notebook
nb = new_notebook(cells=cells)
nbformat.write(nb, 'gene_correlation_plots_romanov2020.qmd')
```

```{r}
#| label: include-romanov2020-correlation-plots
#| child: "gene_correlation_plots_romanov2020.qmd"
```




#### Dotplots




```{r}
#| label: fig-dotplot-dendrogram-genes-romanov2020
#| fig-cap: "Dotplot of selected genes in hypothalamus across different developmental stages in the Romanov et al. (2020) dataset. Cells are colored by expression level.  Note the distinct localization patterns of each gene."
#| fig-width: 6
#| fig-height: 6
Idents(srt.kim) <- "Age"

DotPlot_scCustom(seurat_object = subset(srt.romanov.pub, cells = cells_to_check), colors_use = viridis(n = 30, alpha = .75, direction = -1, option = "E"), features = genes_to_check, flip_axes = T, x_lab_rotate = TRUE, dot.scale = 15)
```




## Barplot of Sox2 and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: fig-sox2-tshr-bargraph
#| fig-width: 7
#| #| fig-height: 6
# Create a new variable that combines Sox2_pos and Tshr_pos
df <- sbs_mtx %>%
  mutate(Age = factor(Age, levels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"), ordered = TRUE), VarComb = case_when(
    Sox2_pos & Tshr_pos ~ "Sox2+/Tshr+",
    Sox2_pos & !Tshr_pos ~ "Sox2+/Tshr-",
    !Sox2_pos & Tshr_pos ~ "Sox2-/Tshr+",
    !Sox2_pos & !Tshr_pos ~ "Sox2-/Tshr-"
  ))

# Calculate counts and proportions for each category
df_counts <- df %>%
  group_by(Age, VarComb) %>%
  summarise(n = n()) %>%
  mutate(prop = n / sum(n))

# Calculate the total counts for each category
df_total_counts <- df %>%
  group_by(Age) %>%
  summarise(total_n = n())

# Create a vector of Age names ordered by prop for Sox2+/Tshr+ cases for each Age
ordered_Ages <- df_counts %>%
  filter(VarComb == "Sox2+/Tshr-") %>%
  arrange(desc(prop)) %>%
  pull(Age)

# Reorder the factor levels of Age
df_counts$Age <- factor(df_counts$Age, levels = ordered_Ages)
df_total_counts$Age <- factor(df_total_counts$Age, levels = ordered_Ages)

# Reorder the factor levels of combinations
df_counts$VarComb <- factor(df_counts$VarComb, levels = rev(c("Sox2+/Tshr-", "Sox2+/Tshr+", "Sox2-/Tshr+", "Sox2-/Tshr-")))

# Create a stacked bar plot
ggplot(df_counts, aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Tshr+" = "purple", "Sox2+/Tshr-" = "red3", "Sox2-/Tshr+" = "royalblue", "Sox2-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts, aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Tshr-" = "red3", "Sox2+/Tshr+" = "purple", "Sox2-/Tshr+" = "royalblue", "Sox2-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Tshr-", "Sox2+/Tshr-")), aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Tshr+" = "purple", "Sox2+/Tshr-" = "red3", "Sox2-/Tshr+" = "royalblue", "Sox2-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Tshr-", "Sox2+/Tshr-")), aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Tshr-" = "red3", "Sox2+/Tshr+" = "purple", "Sox2-/Tshr+" = "royalblue", "Sox2-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))
```




# Calculate and plot chi2 test of independence between Sox2 and Cckbr expression in hypothalamus across different developmental stages




```{r}
#| label: get-goi-sox2-Cckbr
sbs_mtx <- GetAssayData(object = srt.kim, layer = "counts", assay = "RNA")[c("Sox2", "Cckbr"), ] %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  select(Sox2, Cckbr) %>%
  dplyr::bind_cols(srt.kim@meta.data) %>%
  select(Age, Sox2, Cckbr) %>%
  mutate(
    Sox2_pos = Sox2 > 0,
    Cckbr_pos = Cckbr > 0
  )

sbs_mtx %>% skimr::skim()
```

```{r}
#| label: fig-sox2-Cckbr-stats
#| fig-width: 8
#| fig-height: 24
write_csv(sbs_mtx, here(tables_dir, "Sox2-Cckbr-expression-status-between-Ages-on-evaluation-datasets.csv"))


# plot
grouped_ggpiestats(
  data = sbs_mtx,
  x = Cckbr_pos,
  y = Sox2_pos,
  grouping.var = Age,
  perc.k = 1,
  package = "ggsci",
  palette = "category10_d3",
  title.text = "Sox2 specification of Cckbr-positive hypothalamic development",
  caption.text = "Asterisks denote results from proportion tests; \n***: p < 0.001, ns: non-significant",
  plotgrid.args = list(nrow = 8)
)
```




## Barplot of Sox2 and Cckbr expression in hypothalamus across different developmental stages




```{r}
#| label: fig-sox2-Cckbr-bargraph
#| fig-width: 7
#| fig-height: 6
# Create a new variable that combines Sox2_pos and Cckbr_pos
df <- sbs_mtx %>%
  mutate(Age = factor(Age, levels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"), ordered = TRUE), VarComb = case_when(
    Sox2_pos & Cckbr_pos ~ "Sox2+/Cckbr+",
    Sox2_pos & !Cckbr_pos ~ "Sox2+/Cckbr-",
    !Sox2_pos & Cckbr_pos ~ "Sox2-/Cckbr+",
    !Sox2_pos & !Cckbr_pos ~ "Sox2-/Cckbr-"
  ))

# Calculate counts and proportions for each category
df_counts <- df %>%
  group_by(Age, VarComb) %>%
  summarise(n = n()) %>%
  mutate(prop = n / sum(n))

# Calculate the total counts for each category
df_total_counts <- df %>%
  group_by(Age) %>%
  summarise(total_n = n())

# Create a vector of Age names ordered by prop for Sox2+/Cckbr+ cases for each Age
ordered_Ages <- df_counts %>%
  filter(VarComb == "Sox2+/Cckbr-") %>%
  arrange(desc(prop)) %>%
  pull(Age)

# Reorder the factor levels of Age
df_counts$Age <- factor(df_counts$Age, levels = ordered_Ages)
df_total_counts$Age <- factor(df_total_counts$Age, levels = ordered_Ages)

# Reorder the factor levels of combinations
df_counts$VarComb <- factor(df_counts$VarComb, levels = rev(c("Sox2+/Cckbr-", "Sox2+/Cckbr+", "Sox2-/Cckbr+", "Sox2-/Cckbr-")))

# Create a stacked bar plot
ggplot(df_counts, aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Cckbr+" = "yellow", "Sox2+/Cckbr-" = "red3", "Sox2-/Cckbr+" = "green", "Sox2-/Cckbr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts, aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Cckbr-" = "red3", "Sox2+/Cckbr+" = "yellow", "Sox2-/Cckbr+" = "green", "Sox2-/Cckbr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Cckbr-", "Sox2+/Cckbr-")), aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Cckbr+" = "yellow", "Sox2+/Cckbr-" = "red3", "Sox2-/Cckbr+" = "green", "Sox2-/Cckbr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Cckbr-", "Sox2+/Cckbr-")), aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Cckbr-" = "red3", "Sox2+/Cckbr+" = "yellow", "Sox2-/Cckbr+" = "green", "Sox2-/Cckbr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))
```




# Calculate and plot chi2 test of independence between Cckbr and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: get-goi-Cckbr-tshr
sbs_mtx <- GetAssayData(object = srt.kim, layer = "counts", assay = "RNA")[c("Cckbr", "Tshr"), ] %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  select(Cckbr, Tshr) %>%
  dplyr::bind_cols(srt.kim@meta.data) %>%
  select(Age, Cckbr, Tshr) %>%
  mutate(
    Cckbr_pos = Cckbr > 0,
    Tshr_pos = Tshr > 0
  )

sbs_mtx %>% skimr::skim()
```

```{r}
#| label: fig-Cckbr-tshr-stats
#| fig-width: 8
#| fig-height: 24
write_csv(sbs_mtx, here(tables_dir, "Cckbr-Tshr-expression-status-between-Ages-on-evaluation-datasets.csv"))


# plot
grouped_ggpiestats(
  data = sbs_mtx,
  x = Cckbr_pos,
  y = Tshr_pos,
  grouping.var = Age,
  perc.k = 1,
  package = "ggsci",
  palette = "category10_d3",
  title.text = "Cckbr specification of Tshr-positive hypothalamic development",
  caption.text = "Asterisks denote results from proportion tests; \n***: p < 0.001, ns: non-significant",
  plotgrid.args = list(nrow = 8)
)
```




## Barplot of Cckbr and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: fig-Cckbr-tshr-bargraph
#| fig-width: 7
#| fig-height: 6
# Create a new variable that combines Cckbr_pos and Tshr_pos
df <- sbs_mtx %>%
  mutate(Age = factor(Age, levels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"), ordered = TRUE), VarComb = case_when(
    Cckbr_pos & Tshr_pos ~ "Cckbr+/Tshr+",
    Cckbr_pos & !Tshr_pos ~ "Cckbr+/Tshr-",
    !Cckbr_pos & Tshr_pos ~ "Cckbr-/Tshr+",
    !Cckbr_pos & !Tshr_pos ~ "Cckbr-/Tshr-"
  ))

# Calculate counts and proportions for each category
df_counts <- df %>%
  group_by(Age, VarComb) %>%
  summarise(n = n()) %>%
  mutate(prop = n / sum(n))

# Calculate the total counts for each category
df_total_counts <- df %>%
  group_by(Age) %>%
  summarise(total_n = n())

# Create a vector of Age names ordered by prop for Cckbr+/Tshr+ cases for each Age
ordered_Ages <- df_counts %>%
  filter(VarComb == "Cckbr+/Tshr-") %>%
  arrange(desc(prop)) %>%
  pull(Age)

# Reorder the factor levels of Age
df_counts$Age <- factor(df_counts$Age, levels = ordered_Ages)
df_total_counts$Age <- factor(df_total_counts$Age, levels = ordered_Ages)

# Reorder the factor levels of combinations
df_counts$VarComb <- factor(df_counts$VarComb, levels = rev(c("Cckbr+/Tshr-", "Cckbr+/Tshr+", "Cckbr-/Tshr+", "Cckbr-/Tshr-")))

# Create a stacked bar plot
ggplot(df_counts, aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Cckbr+/Tshr+" = "cyan", "Cckbr+/Tshr-" = "green", "Cckbr-/Tshr+" = "royalblue", "Cckbr-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts, aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Cckbr+/Tshr-" = "green", "Cckbr+/Tshr+" = "cyan", "Cckbr-/Tshr+" = "royalblue", "Cckbr-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Cckbr-/Tshr-", "Cckbr+/Tshr-")), aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Cckbr+/Tshr+" = "cyan", "Cckbr+/Tshr-" = "green", "Cckbr-/Tshr+" = "royalblue", "Cckbr-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Cckbr-/Tshr-", "Cckbr+/Tshr-")), aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Cckbr+/Tshr-" = "green", "Cckbr+/Tshr+" = "cyan", "Cckbr-/Tshr+" = "royalblue", "Cckbr-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))
```




# Calculate and plot chi2 test of independence between Sox2 and Gpr173 expression in hypothalamus across different developmental stages




```{r}
#| label: get-goi-sox2-Gpr173
sbs_mtx <- GetAssayData(object = srt.kim, layer = "counts", assay = "RNA")[c("Sox2", "Gpr173"), ] %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  select(Sox2, Gpr173) %>%
  dplyr::bind_cols(srt.kim@meta.data) %>%
  select(Age, Sox2, Gpr173) %>%
  mutate(
    Sox2_pos = Sox2 > 0,
    Gpr173_pos = Gpr173 > 0
  )

sbs_mtx %>% skimr::skim()
```

```{r}
#| label: fig-sox2-Gpr173-stats
#| fig-width: 8
#| fig-height: 24
write_csv(sbs_mtx, here(tables_dir, "Sox2-Gpr173-expression-status-between-Ages-on-evaluation-datasets.csv"))


# plot
grouped_ggpiestats(
  data = sbs_mtx,
  x = Gpr173_pos,
  y = Sox2_pos,
  grouping.var = Age,
  perc.k = 1,
  package = "ggsci",
  palette = "category10_d3",
  title.text = "Sox2 specification of Gpr173-positive hypothalamic development",
  caption.text = "Asterisks denote results from proportion tests; \n***: p < 0.001, ns: non-significant",
  plotgrid.args = list(nrow = 8)
)
```




## Barplot of Sox2 and Gpr173 expression in hypothalamus across different developmental stages




```{r}
#| label: fig-sox2-Gpr173-bargraph
#| fig-width: 7
#| fig-height: 6
# Create a new variable that combines Sox2_pos and Gpr173_pos
df <- sbs_mtx %>%
  mutate(Age = factor(Age, levels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"), ordered = TRUE), VarComb = case_when(
    Sox2_pos & Gpr173_pos ~ "Sox2+/Gpr173+",
    Sox2_pos & !Gpr173_pos ~ "Sox2+/Gpr173-",
    !Sox2_pos & Gpr173_pos ~ "Sox2-/Gpr173+",
    !Sox2_pos & !Gpr173_pos ~ "Sox2-/Gpr173-"
  ))

# Calculate counts and proportions for each category
df_counts <- df %>%
  group_by(Age, VarComb) %>%
  summarise(n = n()) %>%
  mutate(prop = n / sum(n))

# Calculate the total counts for each category
df_total_counts <- df %>%
  group_by(Age) %>%
  summarise(total_n = n())

# Create a vector of Age names ordered by prop for Sox2+/Gpr173+ cases for each Age
ordered_Ages <- df_counts %>%
  filter(VarComb == "Sox2+/Gpr173-") %>%
  arrange(desc(prop)) %>%
  pull(Age)

# Reorder the factor levels of Age
df_counts$Age <- factor(df_counts$Age, levels = ordered_Ages)
df_total_counts$Age <- factor(df_total_counts$Age, levels = ordered_Ages)

# Reorder the factor levels of combinations
df_counts$VarComb <- factor(df_counts$VarComb, levels = rev(c("Sox2+/Gpr173-", "Sox2+/Gpr173+", "Sox2-/Gpr173+", "Sox2-/Gpr173-")))

# Create a stacked bar plot
ggplot(df_counts, aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Gpr173+" = "deeppink", "Sox2+/Gpr173-" = "red3", "Sox2-/Gpr173+" = "orchid", "Sox2-/Gpr173-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts, aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Gpr173-" = "red3", "Sox2+/Gpr173+" = "deeppink", "Sox2-/Gpr173+" = "orchid", "Sox2-/Gpr173-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Gpr173-", "Sox2+/Gpr173-")), aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Sox2+/Gpr173+" = "deeppink", "Sox2+/Gpr173-" = "red3", "Sox2-/Gpr173+" = "orchid", "Sox2-/Gpr173-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Sox2-/Gpr173-", "Sox2+/Gpr173-")), aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Sox2+/Gpr173-" = "red3", "Sox2+/Gpr173+" = "deeppink", "Sox2-/Gpr173+" = "orchid", "Sox2-/Gpr173-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))
```




# Calculate and plot chi2 test of independence between Gpr173 and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: get-goi-Gpr173-tshr
sbs_mtx <- GetAssayData(object = srt.kim, layer = "counts", assay = "RNA")[c("Gpr173", "Tshr"), ] %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  select(Gpr173, Tshr) %>%
  dplyr::bind_cols(srt.kim@meta.data) %>%
  select(Age, Gpr173, Tshr) %>%
  mutate(
    Gpr173_pos = Gpr173 > 0,
    Tshr_pos = Tshr > 0
  )

sbs_mtx %>% skimr::skim()
```

```{r}
#| label: fig-Gpr173-tshr-stats
#| fig-width: 8
#| fig-height: 24
write_csv(sbs_mtx, here(tables_dir, "Gpr173-Tshr-expression-status-between-Ages-on-evaluation-datasets.csv"))


# plot
grouped_ggpiestats(
  data = sbs_mtx,
  x = Gpr173_pos,
  y = Tshr_pos,
  grouping.var = Age,
  perc.k = 1,
  package = "ggsci",
  palette = "category10_d3",
  title.text = "Gpr173 specification of Tshr-positive hypothalamic development",
  caption.text = "Asterisks denote results from proportion tests; \n***: p < 0.001, ns: non-significant",
  plotgrid.args = list(nrow = 8)
)
```




## Barplot of Gpr173 and Tshr expression in hypothalamus across different developmental stages




```{r}
#| label: fig-Gpr173-tshr-bargraph
#| fig-width: 7
#| fig-height: 6
# Create a new variable that combines Gpr173_pos and Tshr_pos
df <- sbs_mtx %>%
  mutate(Age = factor(Age, levels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"), ordered = TRUE), VarComb = case_when(
    Gpr173_pos & Tshr_pos ~ "Gpr173+/Tshr+",
    Gpr173_pos & !Tshr_pos ~ "Gpr173+/Tshr-",
    !Gpr173_pos & Tshr_pos ~ "Gpr173-/Tshr+",
    !Gpr173_pos & !Tshr_pos ~ "Gpr173-/Tshr-"
  ))

# Calculate counts and proportions for each category
df_counts <- df %>%
  group_by(Age, VarComb) %>%
  summarise(n = n()) %>%
  mutate(prop = n / sum(n))

# Calculate the total counts for each category
df_total_counts <- df %>%
  group_by(Age) %>%
  summarise(total_n = n())

# Create a vector of Age names ordered by prop for Gpr173+/Tshr+ cases for each Age
ordered_Ages <- df_counts %>%
  filter(VarComb == "Gpr173+/Tshr-") %>%
  arrange(desc(prop)) %>%
  pull(Age)

# Reorder the factor levels of Age
df_counts$Age <- factor(df_counts$Age, levels = ordered_Ages)
df_total_counts$Age <- factor(df_total_counts$Age, levels = ordered_Ages)

# Reorder the factor levels of combinations
df_counts$VarComb <- factor(df_counts$VarComb, levels = rev(c("Gpr173+/Tshr-", "Gpr173+/Tshr+", "Gpr173-/Tshr+", "Gpr173-/Tshr-")))

# Create a stacked bar plot
ggplot(df_counts, aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Gpr173+/Tshr+" = "magenta4", "Gpr173+/Tshr-" = "orchid", "Gpr173-/Tshr+" = "royalblue", "Gpr173-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts, aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Gpr173+/Tshr-" = "orchid", "Gpr173+/Tshr+" = "magenta4", "Gpr173-/Tshr+" = "royalblue", "Gpr173-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Gpr173-/Tshr-", "Gpr173+/Tshr-")), aes(x = Age, y = n, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("Gpr173+/Tshr+" = "magenta4", "Gpr173+/Tshr-" = "orchid", "Gpr173-/Tshr+" = "royalblue", "Gpr173-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Number of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))

ggplot(df_counts |> filter(!VarComb %in% c("Gpr173-/Tshr-", "Gpr173+/Tshr-")), aes(x = Age, y = prop, fill = VarComb)) +
  geom_bar(stat = "identity", color = "black", position = "fill") +
  scale_fill_manual(values = c("Gpr173+/Tshr-" = "orchid", "Gpr173+/Tshr+" = "magenta4", "Gpr173-/Tshr+" = "royalblue", "Gpr173-/Tshr-" = "grey50")) +
  labs(x = "Hypothalamic subAge", y = "Proportion of cells", fill = "Expression") +
  scale_x_discrete(labels = c("E10", "E11", "E12", "E13", "E14", "E15", "E16", "E18", "P4", "P8", "P14", "P45"))
```

```{r}
sessioninfo::session_info()
```

